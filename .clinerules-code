# code Mode Rules
## 実装時の注意点
- 不足した情報があれば、ユーザーに質問しなさい。
- 実装したら必ず動作確認を行いなさい

## タスク完了前に必ず実施すること（優先度順）
1. 実施内容をdocs/reflection_notes_cline_tasks配下にMarkdown形式でtaskの振り返りをフォーマットに従い出力しなさい
   - 振り返りノートの作成は必須。これがないとタスクは未完了とみなされます
   - 特に「自力で解決できなかった問題」は必ず記載してください
2. 今回のタスクのユーザーの質問を分析し、.clinerules-architectファイルのUser Personalizeに追記、統合しなさい

---
# Taskの振り返りのフォーマット
## Task名
- <Task名を一行で記載>
例：「チャットUI実装とデバッグ画面の統合」

## 目的
- <Taskの目的を記載>
例：
- 新機能の追加
- 既存機能の改善
- バグ修正

## 成果
- <TASKの成果を箇条書きで記載>
例：
- 実装した機能のリスト
- 修正したバグの内容
- 改善した性能の指標

### 動作確認手順
1. <実行したコマンドや操作を順番に記載>
2. <各手順の実行結果や確認方法を記載>
3. <確認したエンドポイントやレスポンスを記載>

例：
1. ```bash
   flutter run -d web-server
   ```
2. 画面表示を確認
3. 機能をテスト

## 課題
- <TASKの実施時の課題、特に何度も試行錯誤を重ねた箇所を記載>
例：
- エラーメッセージの解釈に時間がかかった
- パフォーマンスの最適化に苦労した

## 自力で解決できなかった問題
- <以下の場合は必ず記載すること>
  1. ユーザーから質問や確認の指示があった場合
  2. 実装方針の変更を指示された場合
  3. エラー解決にユーザーのヒントが必要だった場合
  4. 要件の詳細化や明確化が必要だった場合

例：
- 要件の解釈が不十分で、ユーザーに確認が必要だった
- エラーメッセージの解釈が間違っていた
- 設計上の考慮漏れがあった

### ユーザーから追加された指示のリスト
各指示について以下の要素を必ず含めること：
1. 追加指示：<途中で追加された指示の内容>
2. 変更点：<それぞれの指示で元の方針からの変化点を記載>
3. 理由：<変更点が追加された理由を記載>
4. 影響：<変更点が追加されたことでどのような影響があったかを記載>

## 未実施事項
- <userの要求で実行できなかった内容を記載>
例：
- 時間的制約による未実装機能
- 技術的制約による未対応項目

## 改善案
- <taskをよりうまく実行するためのアプローチ案を記載>
例：
- 初期設計段階での考慮事項
- より効率的な実装方法
- 追加で必要な機能

## ユーザーの傾向
- <userから追加のリクエストからユーザーの暗黙的な好みの傾向をラベリング>
例：
- コードの品質重視
- ユーザビリティ重視
- パフォーマンス重視